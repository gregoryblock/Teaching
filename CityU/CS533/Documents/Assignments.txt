In order to execute assembly files, you will need to download and install the latest version of a simulator called spim. While there are a number of variations of spim, the version I'd recommend is called QtSpim. You can dowload QtSpim from this location:

https://sourceforge.net/projects/spimsimulator/files/ 

Note that you should download and install the version that matches your desktop operating system (Windows, Macintosh or Linux). Further, you will need to be logged in with an account that has administrative privileges in order to run the installation program. I have tested revision 9.1.20 on Windows, and have not yet encountered any issues.

Once you've downloaded and installed QtSpim, you will probably want to create a sub-folder to store your assembly programs, which are text files. Be sure you have read-write permissions to this folder!

Here is a brief tutorial on how to download and install QtSpim:

 Watch Media
Name:	CS-533 Week 2, Assignment 1 Tutorial
Duration:	 11 minutes
Added:	05 Jul 2018 09:01 AM
Added By:	Gregory Block, PhD
Description:	
How to download and install QtSpim in order to load and…
Tags:	 




_______________________________________________

General Instructions for Assignments

Modify the source file as specified in the assignment
Execute the modified program file so the results are displayed in the console window
Create a Word document that describes the steps you've completed;
include a screen shot of the console window as evidence the exercise was completed
include a screen shot of the QtSpim simulator window showing the Text tab (not the Data tab)
Attach the Word document and the modified source file to the assignment
The source program file must be executable on the instructor's desktop

Week 2 Assignment - Establish Environment Week 2 Assignment - Establish Environment item options
Attached Files:
File HelloWorld.s  Click for more options (321 B)
The purpose of this exercise is for students to establish and become familiar with the development environment they will use to explore architecture concepts in other exercises.

Instructions

Download and install QtSpim, a simulator tool used to execute assembly language programs written for the MIPS processor.
Modify the attached "HelloWorld.s" file by replacing their name with the text __YOUR_NAME_HERE. 
Execute the modified program file so your name is displayed in the console window

Week 3 Assignment - Arithmetic Week 3 Assignment - Arithmetic item options
Instructions

Modify the HelloWorld.s source file (from the previous assignment) to add two integers, such as 47 and 192. Do not remove the section of code that displays your "hello world" banner and name!
Display the results in the console window; be sure to include a label that says something like "The sum is:" as well as the actual sum

Week 4 Assignment - Console I/O Week 4 Assignment - Console I/O item options
Instructions

Modify the source file program from the previous assignment to prompt the user from the console to provide two integers
When prompting the user, print labels with text similar to "Enter integer 1:" and "Enter integer 2:"
Add the two integers and display the results in the console; be sure to include label with wording similar to "The sum is:" as well as the actual sum

Week 5 Assignment - Looping Week 5 Assignment - Looping item options
Note: For assignments 4-7, you no longer need to include a screenprint of your working program. You only need to submit the assembly code source file (the file with the .s extension). Do not submit a zip file - just the text file.

Instructions

Modify the source file program from the previous assignment to prompt the user to provide two integers in the console
Be sure to print the following labels, "Enter integer 1 (base):" and "Enter integer 2 (exponent):" (or words to that effect) for each prompt
Treating the first integer as the base, and the second integer as the exponent, calculate the result of base^exponent (base to the power of exponent) and display in the console window, including the prompt, "The base^exponent is: ", as well as the actual result

Week 6 Assignment - Branching Week 6 Assignment - Branching item options
Note: For assignments 4-7, you no longer need to include a screenprint of your working program. You only need to submit the assembly code source file (the file with the .s extension). Do not submit a zip file - just the text file.

Instructions

Modify the source file program from the previous assignment to prompt the user to provide two integers, and a mathematical operator in the console
Be sure to print the following labels, "Enter integer 1:"; then "Enter the operation (+, -, * or /):" "Enter integer 2:" (or words to that effect) for each prompt
Calculate the result of the operation based on the operator the user enters, and the two integers, and display in the console window, including the prompt, "The result is: ", as well as the actual result
For example, let's say the user enters the integer 17, the operator "+", and the integer 25. The assembly language module must branch, according to th "+" operator, to perform an addition operation, and store the results in a register so it can be displayed in the console.

Questions

What would you do if the user enters the "/" division operator? How would you handle a fractional result? How would you handle a situation where the user enters an invalid or unexpected operator? What happens when the second integer is a zero, and the operator is division?

Note, you don't have to resolve these questions in this assignment.

Week 7 Assignment - Modularization Week 7 Assignment - Modularization item options

Note: For assignments 4-7, you no longer need to include a screenprint of your working program. You only need to submit the assembly code source file (the file with the .s extension). Do not submit a zip file - just the text file.

Instructions

Reorganize the source file program from the previous assignment to provide the following modular procedures (using labels):
prompt for integer
prompt for operator
prompt for repeat (yes/no)
display integer result 
display decimal result (for the division operation)
Change the controlling logic to call these procedures (the controlling logic is the code inside the main label) so the program behaves the same as the previous week's version
Add a final prompt to see if the user wishes to repeat the process; exit if the user responds with an 'n'; otherwise, repeat
The flowchart looks like this:

Week 8 Assignment - Exception Handling Week 8 Assignment - Exception Handling item options

Note: For assignments 4-7, you no longer need to include a screenprint of your working program. You only need to submit the assembly code source file (the file with the .s extension). Do not submit a zip file - just the text file.

Instructions

Combine the logic in week 5 (looping) and week 7 (modularization) assignments by adding logic to handle a 5th operator - ^ (the caret)
If the user enters the ^ operator, then the calculation is base ^ exponent
Use the looping logic from the week 5 assignment to calculate the result
Add exception handling so that an exception does the following:
Displays the following label: "An exception has occurred in the program"
Branch to the logic that prompts the user to see if they wish to repeat the process (from week 7)
With the exception of 1 & 2 above, the program should have the same functionality as it did in week 7